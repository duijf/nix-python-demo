# This is a direnv configuration file. If you have `direnv` installed, it will
# load this file and execute the code within it once you `cd` to this directory.
#
# That means that:
#
#  - All the system tools will be at the right versions, deterministically.
#  - Once you're in this directory, your "virtualenv" will be automatically activated.
#  - Your "virtualenv" will also
#  - You don't need to `docker exec` to run different tools. They are all available
#    on your host system.
#
# This file is code, so you can run arbitrary shell commands. `direnv` has a
# standard library [1] which provides some of the commands used in this file.
#
# [1]: https://direnv.net/man/direnv-stdlib.1.html
#
# To prevent security problems, `direnv` will ask you to run `direnv allow`
# when it encounters a file with contents that it hasn't seen before. This
# happens on first use and whenever this file changes.

# Load all the Python and system packages from `shell.nix`. Configuring `direnv`
# and installing Nix is all the setup you need to do to get started with this
# project.
use nix

# Set $PROJECT_ROOT, which can be used to make individual maintenance scripts
# path independent / work when called from anywhere in the repository.
export PROJECT_ROOT="$(realpath .)"

# Directories to keep configuration and state.
export STATE_DIR="$PROJECT_ROOT/ignore/state"
export CONFIG_DIR="$PROJECT_ROOT/config"

# Postgres environment variables. We will use a project specific Postgres
# DB that will be reachable over a UNIX domain socket. The data will be
# project specific.
export PGDATA="$STATE_DIR/postgres"
export PGHOST="$PGDATA"
export PGDATABASE="postgres"

# Make all the development scripts callable without an absolute path. This is
# kind of like a project specific `Makefile` where
export PATH="$PROJECT_ROOT/bin/.aliases:$PROJECT_ROOT/bin:$PATH"

# Environment variable configuration. The application reads these into it's
# config classes. In production, the secrets can be populated in any manner
# that's convenient: AWS SecretsManager with Kubernetes secrets, systemd's
# `EnvironmentFile`, or a tool like `vaultenv` to fetch them from HashiCorp
# Vault.
#
# It's also possible to use these tools for development secrets. That means
# individual devs don't have to maintain their own `secrets.env` file.
dotenv $CONFIG_DIR/settings.env
dotenv_if_exists $CONFIG_DIR/secrets.env

# Get PyCharm to automatically discover the Nix virtualenv. It works, but
# every time you add packages to the environment you need to restart PyCharm.
# It's not a huge problem in practice, but can be annoying in the early phases
# of a project when you're adding a lot of dependencies.
mkdir -p $PROJECT_ROOT/.env/bin
ln -sf $(which python) $PROJECT_ROOT/.env/bin/python
